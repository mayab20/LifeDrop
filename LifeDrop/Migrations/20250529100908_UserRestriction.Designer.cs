// <auto-generated />
using System;
using LifeDrop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LifeDrop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250529100908_UserRestriction")]
    partial class UserRestriction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LifeDrop.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<TimeOnly>("TimeSlot")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CenterId" }, "CenterId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("LifeDrop.Models.Bloodinventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsAvailable")
                        .HasColumnType("int");

                    b.HasKey("InventoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CenterId" }, "CenterId")
                        .HasDatabaseName("CenterId1");

                    b.ToTable("bloodinventory", (string)null);
                });

            modelBuilder.Entity("LifeDrop.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<DateOnly>("DonationDate")
                        .HasColumnType("date");

                    b.Property<string>("DonationLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.HasKey("DonationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DonorId" }, "DonorId");

                    b.HasIndex(new[] { "RecipientId" }, "FK_Donation_Recipient");

                    b.ToTable("donation", (string)null);
                });

            modelBuilder.Entity("LifeDrop.Models.DonationCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CenterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("CenterId")
                        .HasName("PRIMARY");

                    b.ToTable("donationcenter", (string)null);
                });

            modelBuilder.Entity("LifeDrop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("LifeDrop.Models.Appointment", b =>
                {
                    b.HasOne("LifeDrop.Models.DonationCenter", "Center")
                        .WithMany("appointments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("appointment_ibfk_2");

                    b.HasOne("LifeDrop.Models.User", "User")
                        .WithMany("appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("appointment_ibfk_1");

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LifeDrop.Models.Bloodinventory", b =>
                {
                    b.HasOne("LifeDrop.Models.DonationCenter", "Center")
                        .WithMany("bloodinventories")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bloodinventory_ibfk_1");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("LifeDrop.Models.Donation", b =>
                {
                    b.HasOne("LifeDrop.Models.User", "Donor")
                        .WithMany("donationDonors")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("donation_ibfk_1");

                    b.HasOne("LifeDrop.Models.User", "Recipient")
                        .WithMany("donationRecipients")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK_Donation_Recipient");

                    b.Navigation("Donor");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("LifeDrop.Models.DonationCenter", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("bloodinventories");
                });

            modelBuilder.Entity("LifeDrop.Models.User", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("donationDonors");

                    b.Navigation("donationRecipients");
                });
#pragma warning restore 612, 618
        }
    }
}
